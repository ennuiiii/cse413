Welcome to DrRacket, version 7.1 [3m].
Language: racket, with debugging; memory limit: 128 MB.
> ;Question 1 testing
;testing factorial
(fact -1)
. . error: failed
> (fact 0)
1
> (fact 1)
1
> (fact 9)
362880
> (fact 10)
3628800
> ;testing combination
(comb 10 0)
1
> (comb 10 3)
120
> (comb 10 7)
120
> (comb 10 10)
1
> (comb 10 11)
. . error: failed
> ;Question 2 testing
(define a '())
> (define b '())
> (define c (1 2 3))
. . application: not a procedure;
 expected a procedure that can be applied to arguments
  given: 1
  arguments...:
> (define c '(1 2 3))
> (define d '(a b c))
> (define e '(q w e r t))
> ;test zipping two empty lists
(zip a b)
'()
> ;test zipping empty list with a non-empty list
(zip a c)
'(1 2 3)
> (zip c a)
'(1 2 3)
> ;test zipping two non-empty lists
(zip c d)
'(1 a 2 b 3 c)
> (zip d c)
'(a 1 b 2 c 3)
> ;test zipping two different-length non-empty lists
(zip d e)
'(a q b w c e r t)
> (zip e d)
'(q a w b e c r t)
> ;Question 3 testing
;test unzip empty list
(unzip a)
'(() ())
> (define even '(1 2 3 4))
> ;test unzip even-length list
(unzip even)
'((1 3) (2 4))
> ;test unzip odd-length list
(unzip e)
'((q e t) (w r))
> ;Question 4 testing
(define empty '())
> (define simple1 '(a))
> (define simple2 '((3 a)))
> (define complex1 '(a (3 b) c (3 d)))
> (define complex2 '((3 b) a (3 c) d))
> (expand empty)
'()
> (expand simple1)
'(a)
> (expand simple2)
'(a a a)
> (expand complex1)
'(a b b b c d d d)
> (expand complex2)
'(b b b a c c c d)
> ;Question 5 testing
(define emptyNode '())
> (define root '(1 () ()))
> (define tree1 '(1 (2 () ()) ()))
> (define tree2 '(1 () (2 () ())))
> (define tree3 '(1 (2 () ()) (3 () ())))
> ;part a testing
(value emptyNode)
'()
> (value root)
1
> (value tree1)
1
> (value tree2)
1
> (value tree3)
1
> ;part b testing
(size emptyNode)
0
> (size root)
1
> (size tree1)
2
> (size tree2)
2
> (size tree3)
3
> ;part c testing
(contains 0 emptyNode)
#f
> (contains 1 root)
#t
> (contains 2 tree1)
#t
> (contains 2 tree2)
#t
> (contains 2 tree3)
#t
> (contains 3 tree3)
#t
> (contains 4 tree3)
#f
> ;part d testing
(leaves emptyNode)
'()
> (leaves root)
'(1)
> (leaves tree1)
'(2)
> (leaves tree2)
'(2)
> (leaves tree3)
'(2 3)
> ;part e testing
(isBST emptyNode)
#t
> (isBST root)
#t
> (isBST tree1)
#f
> (isBST tree2)
#t
> (isBST tree3)
#f
> 